Time complexity analysis: computePath
V = amount of vertices
E = amount of edges

public void computePath(E from, E to) {
    pq.clear();                                                     //  O(V)
    visited.clear();                                                //  O(V)
    distances.clear();                                              //  O(V)
    previous.clear();                                               //  O(V)

    destination = g.getVertex(to);                                  //  O(1)
    Vertex<E> origin = g.getVertex(from);                           //  O(1)

    if (from.equals(to)) {                                          //  O(1)
        path.add(from);                                             //  O(1)
        distances.put(destination, 0);                              //  O(1)
        return;
    }

    for (Vertex<E> v : g.getVertices().values()) {                  //  O(V)
        distances.put(v, Integer.MAX_VALUE);                            //  O(1)
        previous.put(v, null);                                          //  O(1)
    }

    distances.put(origin, 0);                                       //  O(1)
    pq.add(origin);                                                 //  O(1)

    while (!pq.isEmpty()) {                                         //  O(E)
        Vertex<E> u = pq.poll();                                        //  O(log(V^2)) -> O(2log(V)) -> O(log(V))
        if (!visited.contains(u)){                                      //  O(1)
            for (Edge<E> e : g.getOutgoingEdges(u)) {                   //  limited by number of edges to O(E), and to O(V) by if statement above.
                Vertex<E> v = e.getHead();                                  //  O(1)
                int alt = distances.get(u) + e.getCost();                   //  O(1)
                if (alt < distances.get(v)) {                               //  O(1)
                    distances.put(v, alt);                                  //  O(1)
                    previous.put(v, u);                                     //  O(1)
                    pq.add(v);                                              //  O(log(V^2) -> O(2log(V)) -> O(log(V))  // E < V^2
                }
            }
            visited.add(u);                                             //  O(1)
        }
    }

    Vertex<E> u = destination;                                          //  O(1)
    while (previous.get(u) != null) {                                   //  O(V)
        path.add(u.getData());                                          //  O(1)
        u = previous.get(u);                                            //  O(1)
    }
    path.add(origin.getData());                                         //  O(1)
    Collections.reverse(path);                                          //  O(V)
}

For the upper and lower parts of the method, surrounding the while loop, the complexity is O(V).

If every vertex has edges to all other vertices, the total amount of edges in the graph is E = V^2-V. This is also the
maximum amount of elements in the priority queue, as the outgoing edges of each vertex are explored only once.

The while loop enclosing the for loop runs once for every element in the queue -> at worst E times -> O(E).
Ignoring the for loop this gives a complexity of O(E*log(V)) for the while loop.

The inner for loop could on its' own iterate at most E times, but it is limited by the if statement above to V iterations.
The complexity of the for loop would then be O(V*log(V)) , this could also be written as O(E*log(V)) (which is worse),
to match the complexity of the while loop.

As the number of iterations of the for loop is independent of the number of while loop iterations it can be moved
outside the while loop for analysis purposes.

Summary:
    top part:       O(V)
    while:          O(E*log(V))
    for:            O(E*log(V))
    bottom part:    O(V)

The top and bottom parts and the while and for loops are then combined, respectively.

->
    top and bottom parts:   O(V)
    while and for loops:    O(2(E*log(V))) -> O((E*log(V)))

And in total:
    computePath:            O(V+E*log(V)).