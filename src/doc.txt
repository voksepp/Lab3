Time complexity analysis: computePath
V = amount of vertices
E = amount of edges

public void computePath(E from, E to) {
        pq.clear();                                                     //  O(XXX)
        path.clear();                                                   //  O(XXX)
        destination = g.getVertex(to);                                  //  O(1)
        Vertex<E> origin = g.getVertex(from);                           //  O(1)

        if (from.equals(to)) {                                          //  O(1)
            path.add(from);                                                     //  O(1)
            return;
        }

        for (Vertex<E> v : g.getVertices().values()) {                  //  O(XXX)
            v.setMax();                                                         //  O(1)
            previous.put(v, null);                                              //  O(1)
        }

        origin.setDistance(0);                                          //  O(1)
        pq.add(origin);                                                 //  O(1)

        while (!pq.isEmpty()) {
            Vertex<E> u = pq.poll();
            for (Edge<E> e : g.getOutgoingEdges(u)) {
                Vertex<E> v = e.getDestination();
                int alt = u.getDistance() + e.getCost();
                if (alt < v.getDistance()) {
                    v.setDistance(alt);
                    previous.put(v, u);
                    if (!pq.contains(v))
                        pq.add(v);
                }
            }
        }

        Vertex<E> u = destination;                                      //  O(1)
        while (previous.get(u) != null) {                               //  worst case: O(XXX)
            path.add(u.getData());
            u = previous.get(u);
        }
        path.add(origin.getData());                                     //  O(1)
        Collections.reverse(path);                                      //  O(XXX)
    }