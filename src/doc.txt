Time complexity analysis: computePath
V = amount of vertices
E = amount of edges



public void computePath(E from, E to) {
        pq.clear();                                                     //  O(V)
        path.clear();                                                   //  O(V)
        visited.clear();                                                //  O(V)
        destination = g.getVertex(to);                                  //  O(1)
        Vertex<E> origin = g.getVertex(from);                           //  O(1)

        if (from.equals(to)) {                                          //  O(1)
            path.add(from);                                             //  O(1)
            return;
        }

        for (Vertex<E> v : g.getVertices().values()) {                  //  O(V)
            v.setMax();                                                         //  O(1)
            previous.put(v, null);                                              //  O(1)
        }

        origin.setDistance(0);                                          //  O(1)
        pq.add(origin);                                                 //  O(1)

        while (!pq.isEmpty()) {                                         // O(V)
            Vertex<E> u = pq.poll();                                        // O(log(V))
            for (Edge<E> e : g.getOutgoingEdges(u)) {                       // O(E)
                Vertex<E> v = e.getHead();                                  // O(1)
                int alt = u.getDistance() + e.getCost();                        // O(1)
                if (alt < v.getDistance()) {                                    // O(1)
                    v.setDistance(alt);                                         // O(1)
                    previous.put(v, u);                                         // O(1)
                    if (!visited.contains(v))                                   // O(1)
                        pq.add(v);                                              // O(log(V))
                        visited.add(v);                                         // O(1)
                }
            }
        }

        Vertex<E> u = destination;                                      //  O(1)
        while (previous.get(u) != null) {                               //  O(V)
            path.add(u.getData());                                          // O(1)
            u = previous.get(u);                                            // O(1)
        }
        path.add(origin.getData());                                     //  O(1)
        Collections.reverse(path);                                      //  O(V)
    }

